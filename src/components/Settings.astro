---
import Popup from "@/Popup.astro";
import settingsData from "@/data/settings.json";
import { Icon } from "astro-icon/components";

const flatSettingsConfig = settingsData.sections.flatMap(
	(section) => section.settings,
);
---

<Popup
  title="Settings"
  label="Settings"
  triggerIcon="ph:gear-six-bold"
  triggerId="omnibar-settings-btn"
  popupId="settings-popup"
  contentId="settings-popup-content"
  closeBtnId="close-settings-btn"
>
<div class="space-y-6">
<script async="async" data-cfasync="false" src="//learningbuildingroughly.com/b113e1888ef757be96cdcc722c0f31c8/invoke.js"></script>
<div id="container-b113e1888ef757be96cdcc722c0f31c8"></div>
    {
      settingsData.sections.map((section) => (
        <section class="space-y-4 border-t border-overlay pt-4 first:pt-0 first:border-t-0">
          <h2 class="text-lg font-medium text-text">{section.title}</h2>
          {section.settings.map((setting) => (
            <div class="flex items-center justify-between gap-4">
              <div class="flex items-center gap-2">
                <label class="text-text" for={setting.id}>
                  {setting.label}
                </label>
                {setting.description && (
                  <button
                    class="info-btn text-text/60 hover:text-iris transition-colors"
                    aria-label={`More info about ${setting.label}`}
                    data-description={setting.description}
                  >
                    <Icon name="ph:info-bold" class="size-4" />
                  </button>
                )}
              </div>
              <div class="flex items-center">
                {setting.type === "select" && (
                  <select
                    id={setting.id}
                    class="bg-base text-text rounded-md p-1 border border-overlay focus:border-iris focus:outline-none"
                  >
                    {setting.options?.map((option) => (
                      <option disabled={option.disabled} value={option.value}>
                        {option.label}
                      </option>
                    ))}
                  </select>
                )}
                {setting.type === "text" && (
                  <div class="flex flex-col">
                    <input
                      type="text"
                      id={setting.id}
                      class="bg-base text-text rounded-md border p-1 border-overlay focus:border-iris focus:outline-none w-full sm:w-48"
                      placeholder={setting.placeholder || ""}
                      aria-invalid="false"
                      aria-describedby={`${setting.id}-error`}
                    />
                    <p id={`${setting.id}-error`} class="text-xs text-rose mt-1 hidden" role="alert"></p>
                  </div>
                )}
                {setting.type === "toggle" && (
                  <label class="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      id={setting.id}
                      class="sr-only peer"
                    />
                    <div class="bg-pine w-11 h-6 rounded-full peer peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-iris peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-iris" />
                  </label>
                )}
              </div>
            </div>
          ))}
        </section>
      ))
    }

		<div class="border-t border-overlay pt-4 flex items-center space-x-3 text-lg text-text">
  		<a
 				href="https://github.com/Bromine-Labs/Bromine"
				target="_blank"
 				rel="noopener noreferrer"
 				aria-label="GitHub Repository"
 				class="hover:text-iris transition-colors"
 			>
 				<Icon name="ph:github-logo-bold" />
 			</a>
 			<a
 				href="https://discord.gg/a3dMNq9D2K"
 				target="_blank"
 				rel="noopener noreferrer"
 				aria-label="Discord Server"
 				class="hover:text-iris transition-colors"
		  >
			  <Icon name="ph:discord-logo-bold" />
		  </a>
			<p class="text-xs text-text">
	  		Ping: <span id="ping-result" class="font-mono">Pinging...</span>
      </p>
		</div>
		<span class="text-sm">Made with ❤️ by <a class="text-iris" href="https://github.com/Coding4hours">Coding4hours</a>. If you would like to donate, press this <a class="text-iris" href="https://learningbuildingroughly.com/wrfwaku4k?key=db2c034a6c2bc1dea6d0b672e9469543">link</a>. If you would like to upvote, press this <a class="text-iris" href="https://ubghub.org/?site=Bromine&utm_source=https%3A%2F%2Fbromineproxy.netlify.app">link</a></span>
  </div>

  <div
    id="info-tooltip"
    class="bg-overlay absolute z-10 hidden max-w-xs p-2 text-sm rounded-md shadow-lg bg-crust text-text border border-overlay pointer-events-none"
  >
  </div>
</Popup>
<script define:vars={{ settingsConfig: flatSettingsConfig }} defer is:inline>

// --- variables ---
const popupContent = document.getElementById("settings-popup-content");
const tooltip = document.getElementById("info-tooltip");

// --- Settings Change ---

const checkRegex = (element, setting) => {
  const errorElement = document.getElementById(`${setting.id}-error`);

  if (!errorElement || setting.type !== "text" || !setting.regex) {
    return true;
  }

  const regex = new RegExp(setting.regex);
  const isValid = regex.test(element.value);

  errorElement.classList.toggle("hidden", isValid);
  errorElement.textContent = isValid ? "" : (setting.validationMessage ?? "Invalid input.");
  element.classList.toggle("border-rose", !isValid); 
  element.setAttribute("aria-invalid", (!isValid).toString()); 

  return isValid;
};

const load = () => {
  settingsConfig.forEach((setting) => {
    const element = document.getElementById(setting.id);
    if (!element) return;

    const storedValue = localStorage.getItem(setting.id);
    const valueToApply = storedValue ?? setting.defaultValue;

    if (setting.type === "toggle") {
      element.checked = valueToApply === "true";
    } else {
      element.value = valueToApply;
    }
  });
};

const save = (event) => {
  const { target: element } = event;
  const setting = settingsConfig.find((s) => s.id === element.id);
  if (!setting) return;

  if (!checkRegex(element, setting)) {
    return;
  }

  const valueToStore = setting.type === "toggle" ? element.checked : element.value;
  localStorage.setItem(setting.id, valueToStore.toString());
};

const init = () => {
  load();

  settingsConfig.forEach((setting) => {
    const element = document.getElementById(setting.id);
    if (element) {
      element.addEventListener("change", save);

      if (setting.type === "text" && setting.regex) {
        element.addEventListener("input", ({ target: currentElement }) => {
          const currentSetting = settingsConfig.find((s) => s.id === currentElement.id);
          currentSetting && checkRegex(currentElement, currentSetting);
        });
      }
    }
  });
};

// --- Tooltip ---

const showTooltip = (button) => {
  const { description } = button.dataset;
  if (!description || !tooltip) return;

  tooltip.textContent = description;
  tooltip.classList.remove("hidden");

  const buttonRect = button.getBoundingClientRect();
  const contentRect = popupContent.getBoundingClientRect();

  tooltip.style.left = "50%";
  tooltip.style.transform = "translateX(-50%)";

  let top = buttonRect.top - contentRect.top + button.offsetHeight + 8;

  if (top + tooltip.offsetHeight > popupContent.clientHeight) {
    top = buttonRect.top - contentRect.top - tooltip.offsetHeight - 8;  }

  tooltip.style.top = `${top + popupContent.scrollTop}px`;
};

const hideTooltip = () => {
  tooltip?.classList.add("hidden");
};

// --- Ping ---

const ping = async () => {
  const url = location.origin;
  const pingResultEl = document.getElementById("ping-result");
  if (!pingResultEl) return; 

  pingResultEl.textContent = "Pinging...";
  const startTime = performance.now();

  try {
    await fetch(url, { mode: "no-cors", cache: "no-store" });
    const endTime = performance.now();
    const duration = Math.round(endTime - startTime);
    pingResultEl.textContent = `${duration}ms`;
  } catch (e) {
    pingResultEl.textContent = "Error"; 
    console.error("Ping failed:", e);
  }
};

// --- Event listeners and init ---

document.addEventListener("popup-opened", ({ detail }) => {
  if (detail?.popupId === "settings-popup") {
   const bookmarksElement = document.getElementById("bookmarks");
    bookmarksElement?.classList.add("hidden");
    ping();
  }
});

init();

document.querySelectorAll(".info-btn").forEach((button) => {
  button.addEventListener("mouseenter", () => showTooltip(button));
  button.addEventListener("mouseleave", hideTooltip);
  button.addEventListener("focus", () => showTooltip(button));
  button.addEventListener("blur", hideTooltip);   
});

popupContent.addEventListener("scroll", hideTooltip, { passive: true });
</script>
