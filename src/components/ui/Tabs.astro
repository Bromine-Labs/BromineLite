---
import { Icon } from "astro-icon/components";
---

<nav class="flex items-center bg-surface border-b border-overlay h-10">
  <div id="tabs" class="flex-1 flex overflow-x-auto scrollbar-hide items-stretch"></div>
  <button
    id="new-tab-btn"
    class="mr-2 p-2 hover:bg-overlay hover:text-iris transition-colors duration-150 rounded-md focus:outline-none focus:ring-2 focus:ring-iris"
    aria-label="New Tab"
    title="New Tab"
  >
    <Icon name="ph:plus-bold" class="size-5" />
  </button>
</nav>

<script>
  import { newTab, switchTab, closeTab } from "@/utils/lethal.ts";

  const tabsDiv = document.getElementById("tabs");

  /**
   * Generates a favicon URL from a given page URL.
   */
  const getIcon = (url: string) =>
    /^https?:\/\/[\w.-]+\.[a-z]{2,}/i.test(url)
      ? `https://t1.gstatic.com/faviconV2?client=SOCIAL&type=FAVICON&fallback_opts=TYPE,URL&size=64&url=${url}`
      : "https://images.placeholders.dev/24"; // Fallback for local/internal pages

  /**
   * Creates the DOM element for a tab and links it to the tab instance.
   * @param {object} tabInstance - The instance of the Tab class from window.tabs.
   */
  function createTabElement(tabInstance) {
    const tabEl = document.createElement("div");
    tabEl.className =
      "flex items-center min-w-[8rem] max-w-xs px-4 py-1 border-r border-overlay hover:bg-overlay cursor-pointer transition-all duration-150 draggable-tab";
    tabEl.dataset.tabId = tabInstance.tabNumber;
    tabEl.draggable = true;

    tabEl.innerHTML = `
      <img class="w-4 h-4 mr-2 rounded" alt="Favicon" src="${getIcon(tabInstance.url)}" />
      <span class="tab truncate flex-1 text-sm">${tabInstance.title}</span>
      <button class="ml-2 text-text/50 hover:text-text text-sm focus:outline-none">&times;</button>
    `;

    // Attach event listeners
    tabEl.querySelector("button").onclick = (e) => {
      e.stopPropagation();
      closeTab?.(tabInstance.tabNumber);
    };
    tabEl.onclick = () => switchTab?.(tabInstance.tabNumber);

    // Link the DOM element to the tab instance for easy access
    tabInstance.uiElement = tabEl;

    tabsDiv?.appendChild(tabEl);
  }

  /**
   * Sets the active styles for the currently selected tab.
   * @param {number} activeId - The tab number of the active tab.
   */
  function updateActiveStyles(activeId) {
    window.tabs.forEach((tab) => {
      if (!tab.uiElement) return;
      const isActive = tab.tabNumber === activeId;
      tab.uiElement.classList.toggle("bg-overlay", isActive);
      tab.uiElement.classList.toggle("active", isActive);
      tab.uiElement.classList.toggle("font-medium", isActive);
      tab.uiElement.classList.toggle("border-b-2", isActive);
      tab.uiElement.classList.toggle("border-iris", isActive);
    });
  }
  
  // -- Event Listeners for lethal.ts events --

  document.addEventListener("new-tab", (e) => {
    // The event detail now contains the full tab instance
    const newTabInstance = e.detail.tab;
    createTabElement(newTabInstance);
    // A new tab is always active immediately
    updateActiveStyles(newTabInstance.tabNumber);
  });

  document.addEventListener("switch-tab", (e) => {
    updateActiveStyles(e.detail.tabNumber);
  });

  document.addEventListener("url-changed", (e) => {
    const { tabId, title, url } = e.detail;
    // Find the tab instance in our single source of truth
    const tab = window.tabs.find((t) => t.tabNumber === tabId);
    if (!tab || !tab.uiElement) return;

    // Update the UI using the instance's linked element
    tab.uiElement.querySelector(".tab").textContent = title || "New Tab";
    tab.uiElement.querySelector("img").src = getIcon(url);
  });

  document.addEventListener("close-tab", (e) => {
    const tabNumberToClose = e.detail.tabNumber;
    const tabElementToRemove = tabsDiv.querySelector(`[data-tab-id="${tabNumberToClose}"]`);
    if (tabElementToRemove) {
      tabElementToRemove.remove();
    }
  });

  // -- Initialization --

  document.getElementById("new-tab-btn")?.addEventListener("click", () => newTab?.());
  
  // Initial render for any tabs that might exist on page load
  function renderInitialTabs() {
    if (window.tabs && window.tabs.length > 0) {
      tabsDiv.innerHTML = ''; // Clear any existing server-rendered content
      window.tabs.forEach(createTabElement);
      // Ensure the correct tab is marked as active
      if (window.currentTab) {
          updateActiveStyles(window.currentTab);
      }
    }
  }

  // lethal.ts might initialize after this script runs, so we wait briefly.
  // A more robust solution might use a custom event like "lethal-ready".
  setTimeout(renderInitialTabs, 100);

</script>

<script>
  // This drag-and-drop logic can remain as is, as it directly manipulates
  // the DOM order and does not need to interact with the state array.
  const tabsContainer = document.getElementById("tabs");
  let dragged;

  tabsContainer.addEventListener("dragstart", (e) => {
    if (!e.target.classList.contains('draggable-tab')) return;
    dragged = e.target;
    e.target.style.opacity = "0.5";
  });

  tabsContainer.addEventListener("dragend", (e) => {
    if (e.target.classList.contains('draggable-tab')) {
      e.target.style.opacity = "";
    }
  });

  tabsContainer.addEventListener("dragover", (e) => {
    e.preventDefault();
    const afterElement = getDragAfterElement(tabsContainer, e.clientX);
    if (afterElement == null) {
      tabsContainer.appendChild(dragged);
    } else {
      tabsContainer.insertBefore(dragged, afterElement);
    }
  });

  function getDragAfterElement(container, x) {
    const draggableElements = [...container.querySelectorAll(".draggable-tab:not(.dragging)")];

    return draggableElements.reduce(
      (closest, child) => {
        const box = child.getBoundingClientRect();
        const offset = x - box.left - box.width / 2;
        if (offset < 0 && offset > closest.offset) {
          return { offset: offset, element: child };
        } else {
          return closest;
        }
      },
      { offset: Number.NEGATIVE_INFINITY },
    ).element;
  }
</script>

<style>
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  [data-tab-id] {
    border-bottom: 2px solid transparent;
    transition: all 0.2s ease;
  }
  [data-tab-id]:hover,
  [data-tab-id].active {
    background-color: var(--color-overlay);
  }
  [data-tab-id].active {
    border-bottom-color: var(--color-iris);
  }
</style>
