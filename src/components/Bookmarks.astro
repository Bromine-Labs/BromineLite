---
import Popup from "../Popup.astro"
---

<Popup
  title="Bookmarks"
  label="Bookmarks"
  triggerIcon="ph:bookmark-simple-bold"
  triggerId="omnibar-bookmark-btn"
  popupId="bookmark-popup"
  contentId="bookmarks-popup-content"
  closeBtnId="bookmarks-close-btn"
>
  <div class="space-y-4">
    <div class="flex flex-col space-y-2">
      <form id="bookmark-form" class="flex flex-col space-y-2">
        <input type="hidden" id="bookmark-id" />
        <div>
          <label for="bookmark-title" class="text-text font-semibold text-sm"
            >Title:</label
          >
          <input
            type="text"
            id="bookmark-title"
            name="title"
            required
            class="w-full bg-surface0 text-text p-2 rounded focus:outline-none focus:ring-2 focus:ring-iris text-sm"
            placeholder="e.g., My Favorite Site"
          />
        </div>
        <div>
          <label for="bookmark-url" class="text-text font-semibold text-sm"
            >URL:</label
          >
          <input
            type="url"
            id="bookmark-url"
            name="url"
            required
            class="w-full bg-surface0 text-text p-2 rounded focus:outline-none focus:ring-2 focus:ring-iris text-sm"
            placeholder="example.com or something else"
          />
        </div>
        <div class="flex space-x-2 pt-2">
          <button
            type="submit"
            class="bg-green text-text px-3 py-1.5 rounded hover:bg-opacity-80 transition-colors flex-grow text-sm"
          >
            Save
          </button>
          <button
            type="button"
            id="delete-btn"
            class="bg-red text-text px-3 py-1.5 rounded hover:bg-opacity-80 transition-colors flex-grow hidden text-sm"
          >
            Delete
          </button>
        </div>
      </form>
    </div>

    <div class="border-t border-surface1 pt-3">
      <h3 class="text-text font-semibold mb-2">Your Bookmarks</h3>
      <ul
        id="bookmarks"
        class="space-y-2 max-h-[40vh] overflow-y-auto pr-2"
      >
        <li>Nothing here yet...</li>
      </ul>
    </div>
  </div>
</Popup>

<div
  id="bookmark-context-menu"
  class="z-[10000] fixed hidden bg-surface0 text-text rounded shadow-lg py-0.5 border border-surface1"
>
  <button
    data-action="edit"
    class="block w-full text-left px-3 py-1 hover:bg-surface1 text-sm"
  >
    Edit
  </button>
  <button
    data-action="delete"
    class="block w-full text-left px-3 py-1 hover:bg-surface1 text-sm text-red"
  >
    Delete
  </button>
</div>

<script>
  import { getProxied } from "@/utils/lethal.ts";
  const bookmarksList = document.getElementById("bookmarks");
  const bookmarkForm = document.getElementById("bookmark-form");
  const bookmarkIdInput = document.getElementById("bookmark-id");
  const bookmarkTitleInput = document.getElementById("bookmark-title");
  const bookmarkUrlInput = document.getElementById("bookmark-url");
  const deleteBookmarkInPopupBtn = document.getElementById("delete-btn");
  const contextMenu = document.getElementById("bookmark-context-menu");

  let bookmarks = JSON.parse(localStorage.getItem("bookmarks") || "[]");
  let contextMenuIndex = -1;


  const renderList = () => {
    if (!bookmarksList) return;

    if (bookmarks.length === 0) {
      bookmarksList.innerHTML = `
        <div class="text-center py-4 text-text-muted text-sm">
          No bookmarks yet. Add one above!
        </div>
      `;
      return;
    }

    bookmarks.forEach((bookmark, index) => {
      const listItem = document.createElement("li");
      listItem.className =
        "group flex items-center justify-between p-2 rounded hover:bg-surface1 transition-colors";

      const linkContainer = document.createElement("span");
      linkContainer.className =
        "flex-1 min-w-0 truncate text-sm text-text hover:text-iris transition-colors";
      linkContainer.title = `${bookmark.title}\n${bookmark.url}`;
      linkContainer.onclick = async () => {
        currentFrame.src = await getProxied(bookmark.url);
      };

      const titleSpan = document.createElement("span");
      titleSpan.className = "font-medium";
      titleSpan.textContent = bookmark.title;

      const urlSpan = document.createElement("span");
      urlSpan.className = "text-text-muted text-xs block truncate";
      urlSpan.textContent = bookmark.url;

      linkContainer.appendChild(titleSpan);
      linkContainer.appendChild(urlSpan);

      const contextButton = document.createElement("button");
      contextButton.className =
        "bookmark-context-trigger p-1 rounded hover:bg-surface2 text-text-muted hover:text-text transition-colors opacity-0 group-hover:opacity-100";
      contextButton.setAttribute("data-index", index);
      contextButton.setAttribute("aria-label", "Bookmark actions");

      const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
      svg.setAttribute("width", "16");
      svg.setAttribute("height", "16");
      svg.setAttribute("viewBox", "0 0 24 24");
      svg.setAttribute("fill", "none");
      svg.setAttribute("stroke", "currentColor");
      svg.setAttribute("stroke-width", "2");
      svg.setAttribute("stroke-linecap", "round");
      svg.setAttribute("stroke-linejoin", "round");

      const circle1 = document.createElementNS(
        "http://www.w3.org/2000/svg",
        "circle",
      );
      circle1.setAttribute("cx", "12");
      circle1.setAttribute("cy", "12");
      circle1.setAttribute("r", "1");

      const circle2 = document.createElementNS(
        "http://www.w3.org/2000/svg",
        "circle",
      );
      circle2.setAttribute("cx", "12");
      circle2.setAttribute("cy", "5");
      circle2.setAttribute("r", "1");

      const circle3 = document.createElementNS(
        "http://www.w3.org/2000/svg",
        "circle",
      );
      circle3.setAttribute("cx", "12");
      circle3.setAttribute("cy", "19");
      circle3.setAttribute("r", "1");

      svg.appendChild(circle1);
      svg.appendChild(circle2);
      svg.appendChild(circle3);

      contextButton.appendChild(svg);

      listItem.appendChild(linkContainer);
      listItem.appendChild(contextButton);

      bookmarksList.appendChild(listItem);
    });

    document.querySelectorAll(".bookmark-context-trigger").forEach((btn) => {
      btn.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        const index = parseInt(btn.getAttribute("data-index"));
        showMenu(e, index);
      });
    });
  };

  const save = () => {
    localStorage.setItem("bookmarks", JSON.stringify(bookmarks));
    renderList();
  };

  const updateBookmark = (title, url, index = null) => {
    if (index !== null && index >= 0 && index < bookmarks.length) {
      bookmarks[index] = { title, url };
    } else {
      bookmarks.push({ title, url });
    }
    save();
  };

  const showMenu = (e, index) => {
    e.preventDefault();
    e.stopPropagation();

    contextMenuIndex = index;
    const { clientX: x, clientY: y } = e;
    contextMenu.style.left = `${x}px`;
    contextMenu.style.top = `${y}px`;
    contextMenu.style.display = "block";

    const clickOutside = (event) => {
      if (!contextMenu.contains(event.target)) {
        contextMenu.style.display = "none";
        document.removeEventListener("click", clickOutside);
      }
    };

    setTimeout(() => {
      document.addEventListener("click", clickOutside);
    });
  };

  bookmarkForm?.addEventListener("submit", (e) => {
    e.preventDefault();
    const title = bookmarkTitleInput.value.trim();
    const url = bookmarkUrlInput.value.trim();
    const id = bookmarkIdInput.value;

    if (title && url) {
      updateBookmark(title, url, id ? parseInt(id) : null);

      bookmarkForm.reset();
      bookmarkIdInput.value = "";
      deleteBookmarkInPopupBtn.classList.add("hidden");
    }
  });

  renderList();

  contextMenu.addEventListener("click", (e) => {
    const { action } = e.target.dataset;
    contextMenu.classList.add("hidden");

    if (contextMenuIndex !== null && bookmarks[contextMenuIndex]) {
      const bookmark = bookmarks[contextMenuIndex];
      if (action === "edit") {
        bookmarkIdInput.value = contextMenuIndex;
        bookmarkTitleInput.value = bookmark.title;
        bookmarkUrlInput.value = bookmark.url;
        deleteBookmarkInPopupBtn.classList.remove("hidden");
      } else if (action === "delete") {
        if (confirm(`Are you sure you want to delete "${bookmark.title}"?`)) {
          bookmarks.splice(contextMenuIndex, 1);
          save();
        }
      }
    }
    contextMenuIndex = null;
  });

  renderList();

</script>
